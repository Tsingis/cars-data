name: lambda
on:
  push:
    branches:
      - main
    paths:
      - "data/src/**"
      - "data/pyproject.toml"
      - "data/poetry.lock"
      - "data/serverless.yml"
  pull_request:
    branches:
      - main
    paths:
      - "data/src/**"
      - "data/pyproject.toml"
      - "data/poetry.lock"
      - "data/package*.json"
      - "data/serverless.yml"
      - ".github/workflows/lambda.yml"
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  POETRY_VERSION: ${{ vars.POETRY_VERSION }}
  NO_UPDATE_NOTIFIER: true
  SERVERLESS_BUCKET: ${{ secrets.SERVERLESS_BUCKET }}
  SERVERLESS_LICENSE_KEY: ${{ secrets.SERVERLESS_LICENSE_KEY }}
  BUCKET: ${{ secrets.BUCKET }}
  FILENAME: ${{ secrets.FILENAME }}
  DISTRIBUTION: ${{ secrets.DISTRIBUTION }}
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"
          cache-dependency-path: "data/package-lock.json"
      - name: Install dependencies
        run: npm ci
        working-directory: ./data
  package:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: setup
    if: (github.event_name != 'push' && github.event_name != 'workflow_dispatch')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"
          cache-dependency-path: "data/package-lock.json"
      - name: Install Poetry
        run: curl --proto "=https" -sSL https://install.python-poetry.org | python3 -
      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          architecture: "x64"
          cache: "poetry"
          cache-dependency-path: "data/poetry.lock"
      - name: Install python dependencies
        run: poetry install --no-interaction --no-root
        working-directory: ./data
      - name: Create python dependencies file
        run: poetry export -f requirements.txt --without-hashes > requirements.txt
        working-directory: ./data
      - name: Install dependencies
        run: npm ci
        working-directory: ./data
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
      - name: Package
        run: npm run package
        working-directory: ./data
  deploy:
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      id-token: write
      contents: read
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"
          cache-dependency-path: "data/package-lock.json"
      - name: Install Poetry
        run: curl --proto "=https" -sSL https://install.python-poetry.org | python3 -
      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          architecture: "x64"
          cache: "poetry"
          cache-dependency-path: "data/poetry.lock"
      - name: Install python dependencies
        run: poetry install --no-interaction --no-root
        working-directory: ./data
      - name: Create python dependencies file
        run: poetry export -f requirements.txt --without-hashes > requirements.txt
        working-directory: ./data
      - name: Install dependencies
        run: npm ci
        working-directory: ./data
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
      - name: Deploy
        run: npm run deploy
        working-directory: ./data
