Parameters:
  BucketName:
    Type: String
    Description: Name for the S3 bucket
  CurrentExpirationDays:
    Type: Number
    Default: 1
    Description: Expiration in in days for current objects
  NonCurrentExpirationDays:
    Type: Number
    Default: 1
    Description: Expiration in in days for non current objects

Resources:
  Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref BucketName
      AccessControl: Private
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: "DeleteOldVersions"
            Status: Enabled
            NoncurrentVersionExpiration:
              NoncurrentDays: !Ref NonCurrentExpirationDays
          - Id: "DeleteOld"
            Status: Enabled
            ExpirationInDays: !Ref CurrentExpirationDays
            TagFilters:
              - Key: "AllowExpiration"
                Value: "true"
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
              - HEAD
            AllowedHeaders:
              - "*"
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  OriginAccessControl:
    Type: "AWS::CloudFront::OriginAccessControl"
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${BucketName}-oac"
        Description: !Sub "OAC for ${BucketName}"
        SigningProtocol: "sigv4"
        SigningBehavior: "always"
        OriginAccessControlOriginType: "s3"

  BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref BucketName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${BucketName}/*"
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

  CachePolicy:
    Type: "AWS::CloudFront::CachePolicy"
    Properties:
      CachePolicyConfig:
        Name: !Sub "${BucketName}-cache-policy"
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 0
        ParametersInCacheKeyAndForwardedToOrigin:
          QueryStringsConfig:
            QueryStringBehavior: "none"
          HeadersConfig:
            HeaderBehavior: "none"
          CookiesConfig:
            CookieBehavior: "none"
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true

  CloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Origins:
          - Id: !Sub "${BucketName}-origin"
            DomainName: !GetAtt Bucket.DomainName
            OriginAccessControlId: !Ref OriginAccessControl
            S3OriginConfig: {}
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: !Sub "${BucketName}-origin"
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          CachePolicyId: !Ref CachePolicy
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        DefaultRootObject: "data.json"
        Restrictions:
          GeoRestriction:
            RestrictionType: "none"

Outputs:
  CloudFrontDistributionDomainName:
    Description: Domain name of the CloudFront distribution
    Value: !GetAtt CloudFrontDistribution.DomainName
