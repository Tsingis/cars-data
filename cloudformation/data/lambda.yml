Description: Data processing Lambda

Parameters:
  FunctionName:
    Type: String
    Default: cars-data
    Description: Name of the lambda function
  FunctionMemory:
    Type: Number
    Default: 10240
    Description: Memory size for lambda in MB
  FunctionTimeout:
    Type: Number
    Default: 180
    Description: Timeout for lambda in seconds
  RepositoryName:
    Type: String
    Default: cars-data
    Description: Name of the ECR repository
  ImageTag:
    Type: String
    Default: latest
    Description: Image tag to use
  BucketName:
    Type: String
    Description: Name of the S3 bucket
  FileName:
    Type: String
    Default: data.json
    Description: Name of the S3 bucket
  CloudFrontDistributionId:
    Type: String
    Description: ID of the CloudFront distribution

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionName
      PackageType: Image
      Architectures:
        - x86_64
      Code:
        ImageUri: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}:${ImageTag}
      Role: !GetAtt LambdaFunctionRole.Arn
      Timeout: !Ref FunctionTimeout
      MemorySize: !Ref FunctionMemory
      EphemeralStorage: 
        Size: 512
      RecursiveLoop: Terminate
      Environment:
        Variables:
          BUCKET: !Ref BucketName
          FILENAME: !Ref FileName
          DISTRIBUTION: !Ref CloudFrontDistributionId

  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CarsDataLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

  LambdaFunctionECRPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaFunctionECRPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"
            Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${RepositoryName}
      Roles:
        - !Ref LambdaFunctionRole

  LambdaFunctionS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaFunctionS3Policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:PutObjectTagging
            Resource: !Sub arn:aws:s3:::${BucketName}/*
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource: !Sub arn:aws:s3:::${BucketName}
      Roles:
        - !Ref LambdaFunctionRole

  LambdaFunctionCloudWatchPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaFunctionCloudWatchPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "*"
      Roles:
        - !Ref LambdaFunctionRole

  LambdaFunctionCloudFrontPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaFunctionCloudFrontPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - cloudfront:CreateInvalidation
            Resource: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistributionId}
      Roles:
        - !Ref LambdaFunctionRole
